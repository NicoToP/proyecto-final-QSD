then:
 sino que es una característica de las promesas en JavaScript.
El método .then() es una forma de acceder al valor devuelto por una promesa cuando se resuelve. Cuando se utiliza una promesa, se puede encadenar un .then() al final de la promesa, que se ejecutará una vez que se haya resuelto la promesa. Dentro del .then(), se puede acceder al valor devuelto por la promesa utilizando una función de retorno de llamada.
 una característica de las promesas en JavaScript.
ejemplo then 
function waitAndPrint(msg, time) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log(msg);
      resolve();
    }, time);
  });
}
waitAndPrint("Hola", 2000)
  .then(() => console.log("Promesa resuelta"))
  .catch(() => console.error("Ocurrió un error"));
En este ejemplo, la función waitAndPrint toma dos argumentos: un mensaje y un tiempo en milisegundos. Retorna una promesa que se resuelve después de que se haya esperado el tiempo especificado. Dentro de .then(), simplemente imprimimos un mensaje diciendo que la promesa se ha resuelto. Si ocurriera algún error, usaríamos .catch() para manejarlo.
Cuando trabajas con promesas en JavaScript, lo común es utilizar el método then() para manejar el resultado de una promesa resuelta.Sin embargo, si la promesa devuelve un error, entonces debes utilizar el método catch() para manejar ese error.Entonces, no siempre necesitas usar then(), solo cuando quieres manejar el resultado exitoso de una promesa. Si no necesitas manejar el resultado exitoso, puedes omitir el then() y solo utilizar el catch() para manejar cualquier error que se produzca.
Además, es importante tener en cuenta que puedes encadenar varios métodos then() para realizar varias operaciones después de que se resuelva una promesa. Esto se conoce como "chaining" y es una técnica común para trabajar con promesas